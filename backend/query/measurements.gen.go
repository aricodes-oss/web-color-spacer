// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/models"
)

func newMeasurement(db *gorm.DB, opts ...gen.DOOption) measurement {
	_measurement := measurement{}

	_measurement.measurementDo.UseDB(db, opts...)
	_measurement.measurementDo.UseModel(&models.Measurement{})

	tableName := _measurement.measurementDo.TableName()
	_measurement.ALL = field.NewAsterisk(tableName)
	_measurement.ID = field.NewUint(tableName, "id")
	_measurement.CreatedAt = field.NewTime(tableName, "created_at")
	_measurement.UpdatedAt = field.NewTime(tableName, "updated_at")
	_measurement.DeletedAt = field.NewField(tableName, "deleted_at")
	_measurement.R = field.NewFloat64(tableName, "to_r")
	_measurement.G = field.NewFloat64(tableName, "to_g")
	_measurement.B = field.NewFloat64(tableName, "to_b")
	_measurement.EndID = field.NewInt(tableName, "end_id")
	_measurement.Distance = field.NewFloat64(tableName, "distance")

	_measurement.fillFieldMap()

	return _measurement
}

type measurement struct {
	measurementDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	R         field.Float64
	G         field.Float64
	B         field.Float64
	EndID     field.Int
	Distance  field.Float64

	fieldMap map[string]field.Expr
}

func (m measurement) Table(newTableName string) *measurement {
	m.measurementDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m measurement) As(alias string) *measurement {
	m.measurementDo.DO = *(m.measurementDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *measurement) updateTableName(table string) *measurement {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.R = field.NewFloat64(table, "to_r")
	m.G = field.NewFloat64(table, "to_g")
	m.B = field.NewFloat64(table, "to_b")
	m.EndID = field.NewInt(table, "end_id")
	m.Distance = field.NewFloat64(table, "distance")

	m.fillFieldMap()

	return m
}

func (m *measurement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *measurement) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["to_r"] = m.R
	m.fieldMap["to_g"] = m.G
	m.fieldMap["to_b"] = m.B
	m.fieldMap["end_id"] = m.EndID
	m.fieldMap["distance"] = m.Distance
}

func (m measurement) clone(db *gorm.DB) measurement {
	m.measurementDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m measurement) replaceDB(db *gorm.DB) measurement {
	m.measurementDo.ReplaceDB(db)
	return m
}

type measurementDo struct{ gen.DO }

type IMeasurementDo interface {
	gen.SubQuery
	Debug() IMeasurementDo
	WithContext(ctx context.Context) IMeasurementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMeasurementDo
	WriteDB() IMeasurementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMeasurementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMeasurementDo
	Not(conds ...gen.Condition) IMeasurementDo
	Or(conds ...gen.Condition) IMeasurementDo
	Select(conds ...field.Expr) IMeasurementDo
	Where(conds ...gen.Condition) IMeasurementDo
	Order(conds ...field.Expr) IMeasurementDo
	Distinct(cols ...field.Expr) IMeasurementDo
	Omit(cols ...field.Expr) IMeasurementDo
	Join(table schema.Tabler, on ...field.Expr) IMeasurementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMeasurementDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMeasurementDo
	Group(cols ...field.Expr) IMeasurementDo
	Having(conds ...gen.Condition) IMeasurementDo
	Limit(limit int) IMeasurementDo
	Offset(offset int) IMeasurementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMeasurementDo
	Unscoped() IMeasurementDo
	Create(values ...*models.Measurement) error
	CreateInBatches(values []*models.Measurement, batchSize int) error
	Save(values ...*models.Measurement) error
	First() (*models.Measurement, error)
	Take() (*models.Measurement, error)
	Last() (*models.Measurement, error)
	Find() ([]*models.Measurement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Measurement, err error)
	FindInBatches(result *[]*models.Measurement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Measurement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMeasurementDo
	Assign(attrs ...field.AssignExpr) IMeasurementDo
	Joins(fields ...field.RelationField) IMeasurementDo
	Preload(fields ...field.RelationField) IMeasurementDo
	FirstOrInit() (*models.Measurement, error)
	FirstOrCreate() (*models.Measurement, error)
	FindByPage(offset int, limit int) (result []*models.Measurement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMeasurementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m measurementDo) Debug() IMeasurementDo {
	return m.withDO(m.DO.Debug())
}

func (m measurementDo) WithContext(ctx context.Context) IMeasurementDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m measurementDo) ReadDB() IMeasurementDo {
	return m.Clauses(dbresolver.Read)
}

func (m measurementDo) WriteDB() IMeasurementDo {
	return m.Clauses(dbresolver.Write)
}

func (m measurementDo) Session(config *gorm.Session) IMeasurementDo {
	return m.withDO(m.DO.Session(config))
}

func (m measurementDo) Clauses(conds ...clause.Expression) IMeasurementDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m measurementDo) Returning(value interface{}, columns ...string) IMeasurementDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m measurementDo) Not(conds ...gen.Condition) IMeasurementDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m measurementDo) Or(conds ...gen.Condition) IMeasurementDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m measurementDo) Select(conds ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m measurementDo) Where(conds ...gen.Condition) IMeasurementDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m measurementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMeasurementDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m measurementDo) Order(conds ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m measurementDo) Distinct(cols ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m measurementDo) Omit(cols ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m measurementDo) Join(table schema.Tabler, on ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m measurementDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m measurementDo) RightJoin(table schema.Tabler, on ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m measurementDo) Group(cols ...field.Expr) IMeasurementDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m measurementDo) Having(conds ...gen.Condition) IMeasurementDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m measurementDo) Limit(limit int) IMeasurementDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m measurementDo) Offset(offset int) IMeasurementDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m measurementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMeasurementDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m measurementDo) Unscoped() IMeasurementDo {
	return m.withDO(m.DO.Unscoped())
}

func (m measurementDo) Create(values ...*models.Measurement) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m measurementDo) CreateInBatches(values []*models.Measurement, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m measurementDo) Save(values ...*models.Measurement) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m measurementDo) First() (*models.Measurement, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Measurement), nil
	}
}

func (m measurementDo) Take() (*models.Measurement, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Measurement), nil
	}
}

func (m measurementDo) Last() (*models.Measurement, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Measurement), nil
	}
}

func (m measurementDo) Find() ([]*models.Measurement, error) {
	result, err := m.DO.Find()
	return result.([]*models.Measurement), err
}

func (m measurementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Measurement, err error) {
	buf := make([]*models.Measurement, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m measurementDo) FindInBatches(result *[]*models.Measurement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m measurementDo) Attrs(attrs ...field.AssignExpr) IMeasurementDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m measurementDo) Assign(attrs ...field.AssignExpr) IMeasurementDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m measurementDo) Joins(fields ...field.RelationField) IMeasurementDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m measurementDo) Preload(fields ...field.RelationField) IMeasurementDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m measurementDo) FirstOrInit() (*models.Measurement, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Measurement), nil
	}
}

func (m measurementDo) FirstOrCreate() (*models.Measurement, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Measurement), nil
	}
}

func (m measurementDo) FindByPage(offset int, limit int) (result []*models.Measurement, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m measurementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m measurementDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m measurementDo) Delete(models ...*models.Measurement) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *measurementDo) withDO(do gen.Dao) *measurementDo {
	m.DO = *do.(*gen.DO)
	return m
}
